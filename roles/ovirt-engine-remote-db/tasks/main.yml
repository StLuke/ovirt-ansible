---
# main file for remote DB task
# based on https://fedoraproject.org/wiki/PostgreSQL

- name: Include postgres params
  include_vars: default.yml

- name: Override postgres params for CentOs or RedHat when ovirt >= 4.2
  include_vars: postgres95.yml
  when:
    - ovirt_engine_version >= '4.2'
    - ansible_distribution in ('CentOS', 'RedHat')

# install libselinux-python on machine - selinux policy
- name: install SELinux requirements to run ansible modules managing SELinux.
  yum:
    name: "{{ item }}"
    state: "present"
  with_items:
    - libselinux-python
    - policycoreutils-python

- name: install psycopg2 requirements to run ansible modules managing postgres.
  yum:
    name: "python-psycopg2"
    state: "present"

- name: check PostgreSQL service
  service:
    name: "{{ postgres_service_name }}"
    state: started
  register: postgresql_status
  ignore_errors: True

- name: yum install PostgreSQL
  yum:
    name: "{{ postgres_server }}"
    state: installed
    update_cache: yes
  when: postgresql_status|failed

- name: enable sudo without tty
  lineinfile:
    path: /etc/sudoers
    state: present
    regexp: '^Defaults *requiretty$'
    line: 'Defaults    !requiretty'
  when: postgresql_status|failed

- name: scl enable
  shell: 'scl enable rh-postgresql95 bash'
  when:
    - postgresql_status|failed
    - ovirt_engine_version >= '4.2'
    - ansible_distribution in ('CentOS', 'RedHat')
  tags:
    - skip_ansible_lint

- name: run PostgreSQL DB config
  become_user: postgres
  become: yes
  shell: '{{ postgres_setup_cmd }}'
  args:
    creates: "{{ postgres_config_file }}"
  when: ovirt_engine_version < '4.2'
  tags:
    - skip_ansible_lint

- name: run PostgreSQL DB config
  shell: '{{ postgres_setup_cmd }}'
  args:
    creates: "{{ postgres_config_file }}"
  when: ovirt_engine_version >= '4.2'
  tags:
    - skip_ansible_lint

- name: start PostgreSQL service
  service:
    name: "{{ postgres_service_name }}"
    state: started
    enabled: yes

# allow access engine database access from outside
- name: "update pg_hba.conf to allow connection for ovirt_engine_remote_db"
  lineinfile:
    dest: '{{ postgres_data_dir }}/pg_hba.conf'
    line: >
      {{ item.type }} {{ ovirt_engine_db_name }} {{ ovirt_engine_db_user }}
      {{ item.address | default(' ') }} {{ item.method }}
    insertafter: EOF
  with_items: "{{ ovirt_engine_remote_db_access | list }}"
  when: ovirt_engine_remote_db == True

# allow access engine dwh database access from outside
- name: "update pg_hba.conf to allow connection for ovirt_engine_dwh_remote_db"
  lineinfile:
    dest: '{{ postgres_data_dir }}/pg_hba.conf'
    line: >
      {{ item.type }} {{ ovirt_engine_dwh_db_name }}
      {{ ovirt_engine_dwh_db_user }} {{ item.address | default(' ') }}
      {{ item.method }}
    insertafter: EOF
  with_items: "{{ ovirt_engine_remote_db_access | list }}"
  when: ovirt_engine_dwh_remote_db == True

# listen on specific address
- name: update postgresql.conf -> listen_addresses='*'
  lineinfile:
    dest: "{{ postgres_config_file }}"
    regexp: "^listen_addresses *=.*$"
    line: "listen_addresses='{{ovirt_engine_remote_db_listen_address}}'"
    insertafter: EOF
  when: postgresql_status|failed

# listen on specific port
- name: update postgresql.conf -> port number
  lineinfile:
    dest: "{{ postgres_config_file }}"
    regexp: "^port *=.*$"
    line: "port={{ ovirt_engine_remote_db_port }}"
    insertafter: EOF
  when: postgresql_status|failed and ovirt_engine_remote_db_port != 5432

# postgresql.conf: (el7)
# Note: In RHEL/Fedora installations, you can't set the port number here;
#   adjust it in the service file instead.
#   /usr/lib/systemd/system/postgresql.service
#    - Environment=PGPORT=5432
- name: update postgresql.conf -> port number in service file (Fedora & RHEL)
  lineinfile:
    dest: '/usr/lib/systemd/system/{{ postgres_service_name }}.service'
    backrefs: yes
    regexp: "^Environment=PGPORT *=.*$"
    line: "Environment=PGPORT={{ ovirt_engine_remote_db_port }}"
  register: port_update
  when: postgresql_status|failed and ovirt_engine_remote_db_port != 5432
  ignore_errors: True

# daemon reload - service file was changed
- name: systemctl daemon-reload (el7)
  shell: 'systemctl daemon-reload'
  when: postgresql_status|failed and ovirt_engine_remote_db_port != 5432 and port_update|success
  tags:
    - skip_ansible_lint

# el6 use only service (systemctl not present)
- name: update postgresql.conf -> port number in service file (el6)
  lineinfile:
    dest: '/etc/init.d/postgresql'
    backrefs: yes
    regexp: "^PGPORT *=.*$"
    line: "PGPORT={{ ovirt_engine_remote_db_port }}"
  when: postgresql_status|failed and ovirt_engine_remote_db_port != 5432 and port_update|failed
  ignore_errors: True

# Required for vacuum feature
- name: set vacuum configuration for postgresql
  ini_file:
    path: "{{ postgres_config_file }}"
    option: "{{ item.key }}"
    value: "{{ item.value }}"
    section: null
  with_dict: "{{ ovirt_engine_remote_db_vacuum_config }}"
  when: ovirt_engine_remote_db_vacuum

# allow selinux for postgresql non-standard port
- name: allow selinux for non-standard port
  seport:
    ports: "{{ ovirt_engine_remote_db_port }}"
    proto: "tcp"
    setype: "postgresql_port_t"
    state: present
  when: postgresql_status|failed and ovirt_engine_remote_db_port != 5432
  ignore_errors: True

# first check of PostgreSQL - if fail, setup
- name: PostgreSQL reload configuration
  service:
    name: "{{ postgres_service_name }}"
    state: restarted

- name: check iptables service
  service:
    name: iptables
    state: started
  register: iptables_status
  when: postgresql_status|failed
  ignore_errors: True

- name: open port for PostgreSQL in iptables
  shell: "iptables -I INPUT -p tcp -m state --state NEW -m tcp --dport {{ovirt_engine_remote_db_port}} -j ACCEPT"
  when: postgresql_status|failed and not iptables_status|failed
  tags:
    - skip_ansible_lint

- name: save iptables rules
  shell: "/sbin/iptables-save"
  when: postgresql_status|failed and not iptables_status|failed
  tags:
    - skip_ansible_lint

- name: check firewalld service
  service:
    name: firewalld
    state: started
  register: firewalld_status
  when: postgresql_status|failed
  ignore_errors: True

- name: open port for PostgreSQL in firewalld
  firewalld:
    port: "{{ovirt_engine_remote_db_port|int}}/tcp"
    permanent: True
    state: enabled
  when: postgresql_status|failed and not firewalld_status|failed

- name: reload firewalld
  shell: "firewall-cmd --reload"
  when: postgresql_status|failed and not firewalld_status|failed
  tags:
    - skip_ansible_lint

- name: create DWH DB user
  become: true
  become_user: postgres
  postgresql_user:
    name: "{{ item.user }}"
    password: "{{ item.password }}"
  with_items:
    - user: "{{ ovirt_engine_db_user }}"
      password: "{{ ovirt_engine_db_password }}"
    - user: "{{ ovirt_engine_dwh_db_user }}"
      password: "{{ ovirt_engine_dwh_db_password }}"
  when: ovirt_engine_dwh_remote_db == True

- name: create engine & DWH DBs
  become: true
  become_user: postgres
  postgresql_db:
    name: "{{ item.db_name }}"
    owner: "{{ item.user }}"
    encoding: UTF-8
    lc_collate: en_US.UTF-8
    lc_ctype: en_US.UTF-8
    template: template0
  with_items:
    - db_name: "{{ ovirt_engine_db_name }}"
      user: "{{ ovirt_engine_db_user }}"
    - db_name: "{{ ovirt_engine_dwh_db_name }}"
      user: "{{ ovirt_engine_dwh_db_user }}"
  when: ovirt_engine_dwh_remote_db == True

- name: check PostgreSQL service
  service:
    name: "{{ postgres_service_name }}"
    state: started
    enabled: yes

- name: clean tmp files
  file:
    path: '/tmp/ansible-sql'
    state: 'absent'
