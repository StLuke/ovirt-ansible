---
# main file for remote DB task
# based on https://fedoraproject.org/wiki/PostgreSQL

# install libselinux-python on machine - selinux policy
- name: install SELinux requirements to run ansible modules managing SELinux.
  yum:
    name: "{{ item }}"
    state: "present"
  with_items:
    - libselinux-python
    - policycoreutils-python

- name: check PostgreSQL service
  service:
    name: postgresql
    state: started
  register: postgresql_status
  ignore_errors: True

- name: yum install PostgreSQL
  yum:
    name: "postgresql-server"
    state: installed
    update_cache: yes
  when: postgresql_status|failed

- name: enable sudo without tty
  lineinfile:
    path: /etc/sudoers
    state: present
    regexp: '^Defaults *requiretty$'
    line: 'Defaults    !requiretty'
  when: postgresql_status|failed

- name: run PostgreSQL initdb
  become_user: postgres
  become: yes
  shell: '/usr/bin/initdb -D /var/lib/pgsql/data'
  args:
    creates: "/var/lib/pgsql/data/postgresql.conf"
  when: postgresql_status|failed
  tags:
    - skip_ansible_lint

- name: start PostgreSQL service
  service:
    name: postgresql
    state: started
    enabled: yes

# allow access engine database access from outside
- name: "update pg_hba.conf to allow connection for ovirt_engine_remote_db"
  lineinfile:
    dest: '/var/lib/pgsql/data/pg_hba.conf'
    line: >
      {{ item.type }} {{ ovirt_engine_db_name }} {{ ovirt_engine_db_user }}
      {{ item.address | default(' ') }} {{ item.method }}
    insertafter: EOF
  with_items: "{{ ovirt_engine_remote_db_access | list }}"
  when: ovirt_engine_remote_db == True

# allow access engine dwh database access from outside
- name: "update pg_hba.conf to allow connection for ovirt_engine_dwh_remote_db"
  lineinfile:
    dest: '/var/lib/pgsql/data/pg_hba.conf'
    line: >
      {{ item.type }} {{ ovirt_engine_dwh_db_name }}
      {{ ovirt_engine_dwh_db_user }} {{ item.address | default(' ') }}
      {{ item.method }}
    insertafter: EOF
  with_items: "{{ ovirt_engine_remote_db_access | list }}"
  when: ovirt_engine_dwh_remote_db == True

# listen on specific address
- name: update postgresql.conf -> listen_addresses='*'
  lineinfile:
    dest: "{{ ovirt_engine_remote_db_config_file }}"
    regexp: "^listen_addresses *=.*$"
    line: "listen_addresses='{{ovirt_engine_remote_db_listen_address}}'"
    insertafter: EOF
  when: postgresql_status|failed

# listen on specific port
- name: update postgresql.conf -> port number
  lineinfile:
    dest: "{{ ovirt_engine_remote_db_config_file }}"
    regexp: "^port *=.*$"
    line: "port={{ ovirt_engine_remote_db_port }}"
    insertafter: EOF
  when: postgresql_status|failed and ovirt_engine_remote_db_port != 5432

# postgresql.conf: (el7)
# Note: In RHEL/Fedora installations, you can't set the port number here;
#   adjust it in the service file instead.
#   /usr/lib/systemd/system/postgresql.service
#    - Environment=PGPORT=5432
- name: update postgresql.conf -> port number in service file (Fedora & RHEL)
  lineinfile:
    dest: '/usr/lib/systemd/system/postgresql.service'
    backrefs: yes
    regexp: "^Environment=PGPORT *=.*$"
    line: "Environment=PGPORT={{ ovirt_engine_remote_db_port }}"
  register: port_update
  when: postgresql_status|failed and ovirt_engine_remote_db_port != 5432
  ignore_errors: True

# daemon reload - service file was changed
- name: systemctl daemon-reload (el7)
  shell: 'systemctl daemon-reload'
  when: postgresql_status|failed and ovirt_engine_remote_db_port != 5432 and port_update|success
  tags:
    - skip_ansible_lint

# el6 use only service (systemctl not present)
- name: update postgresql.conf -> port number in service file (el6)
  lineinfile:
    dest: '/etc/init.d/postgresql'
    backrefs: yes
    regexp: "^PGPORT *=.*$"
    line: "PGPORT={{ ovirt_engine_remote_db_port }}"
  when: postgresql_status|failed and ovirt_engine_remote_db_port != 5432 and port_update|failed
  ignore_errors: True

# Required for vacuum feature
- name: set vacuum configuration for postgresql
  ini_file:
    path: "{{ ovirt_engine_remote_db_config_file }}"
    option: "{{ item.key }}"
    value: "{{ item.value }}"
    section: null
  with_dict: "{{ ovirt_engine_remote_db_vacuum_config }}"
  when: ovirt_engine_remote_db_vacuum

# allow selinux for postgresql non-standard port
- name: allow selinux for non-standard port
  seport:
    ports: "{{ ovirt_engine_remote_db_port }}"
    proto: "tcp"
    setype: "postgresql_port_t"
    state: present
  when: postgresql_status|failed and ovirt_engine_remote_db_port != 5432
  ignore_errors: True

# first check of PostgreSQL - if fail, setup
- name: PostgreSQL reload configuration
  service:
    name: postgresql
    state: restarted

- name: check iptables service
  service:
    name: iptables
    state: started
  register: iptables_status
  when: postgresql_status|failed
  ignore_errors: True

- name: open port for PostgreSQL in iptables
  shell: "iptables -I INPUT -p tcp -m state --state NEW -m tcp --dport {{ovirt_engine_remote_db_port}} -j ACCEPT"
  when: postgresql_status|failed and not iptables_status|failed
  tags:
    - skip_ansible_lint

- name: save iptables rules
  shell: "/sbin/iptables-save"
  when: postgresql_status|failed and not iptables_status|failed
  tags:
    - skip_ansible_lint

- name: check firewalld service
  service:
    name: firewalld
    state: started
  register: firewalld_status
  when: postgresql_status|failed
  ignore_errors: True

- name: open port for PostgreSQL in firewalld
  firewalld:
    port: "{{ovirt_engine_remote_db_port|int}}/tcp"
    permanent: True
    state: enabled
  when: postgresql_status|failed and not firewalld_status|failed

- name: reload firewalld
  shell: "firewall-cmd --reload"
  when: postgresql_status|failed and not firewalld_status|failed
  tags:
    - skip_ansible_lint

- name: get postgres path
  become: yes
  become_user: postgres
  shell: echo $HOME
  register: pgpath
  tags:
    - skip_ansible_lint

- name: creating directory ansible-sql for sql scripts
  file:
    path: "{{ pgpath.stdout }}/ansible-sql"
    state: directory

- name: copy SQL scripts
  template:
    src: "{{item}}.j2"
    dest: "{{ pgpath.stdout }}/ansible-sql/{{item}}"
    mode: 0644
    owner: postgres
    group: postgres
  with_items:
    - "ovirt-engine-db-create.sql"
    - "ovirt-engine-db-user-create.sql"
    - "ovirt-engine-dwh-db-create.sql"
    - "ovirt-engine-dwh-db-user-create.sql"

- name: copy drop SQL scripts
  template:
    src: "{{item}}.j2"
    dest: "{{ pgpath.stdout }}/ansible-sql/{{item}}"
    mode: 0644
    owner: postgres
    group: postgres
  with_items:
    - "ovirt-engine-db-drop.sql"
    - "ovirt-engine-db-user-drop.sql"
    - "ovirt-engine-dwh-db-drop.sql"
    - "ovirt-engine-dwh-db-user-drop.sql"
  when: ovirt_engine_remote_db_force == True

- name: drop engine DB and user
  become_user: postgres
  become: yes
  # ON_ERROR_STOP=1 - command returns non-zero value, otherwise is always 0 with -f flag
  command: psql -p {{ovirt_engine_remote_db_port}} -a -v ON_ERROR_STOP=1 -f ansible-sql/'{{item}}'
  with_items:
    - "ovirt-engine-db-drop.sql"
    - "ovirt-engine-db-user-drop.sql"
  when:
    - ovirt_engine_remote_db == True
    - ovirt_engine_remote_db_force == True

- name: create engine DB and user
  become_user: postgres
  become: yes
  command: psql -p {{ovirt_engine_remote_db_port}} -a -v ON_ERROR_STOP=1 -f ansible-sql/'{{item}}'
  with_items:
    - "ovirt-engine-db-user-create.sql"
    - "ovirt-engine-db-create.sql"
  when: ovirt_engine_remote_db == True

- name: drop DWH DB and user
  become_user: postgres
  become: yes
  command: psql -p {{ovirt_engine_remote_db_port}} -a -v ON_ERROR_STOP=1 -f ansible-sql/'{{item}}'
  with_items:
    - "ovirt-engine-dwh-db-drop.sql"
    - "ovirt-engine-dwh-db-user-drop.sql"
  when:
    - ovirt_engine_dwh_remote_db == True
    - ovirt_engine_remote_db_force == True

- name: create DWH DB and user
  become_user: postgres
  become: yes
  command: psql -p {{ovirt_engine_remote_db_port}} -a -v ON_ERROR_STOP=1 -f ansible-sql/'{{item}}'
  with_items:
    - "ovirt-engine-dwh-db-user-create.sql"
    - "ovirt-engine-dwh-db-create.sql"
  when: ovirt_engine_dwh_remote_db == True

- name: create directory ansible-dump for db dump files
  file:
    path: "{{ pgpath.stdout }}/ansible-dump"
    state: directory
  when: virt_engine_remote_db_dump is defined or ovirt_engine_remote_db_dump is defined

- name: get engine dump
  copy:
    src: "{{ ovirt_engine_remote_db_dump }}"
    dest: "{{ pgpath.stdout }}/ansible-dump/{{ ovirt_engine_remote_db_dump | basename }}"
  when:
    - ovirt_engine_remote_db_dump is defined
    - ovirt_engine_remote_db == True

- name: import engine dump
  become_user: postgres
  become: yes
  shell: pg_restore -d {{ ovirt_engine_db_name }} ansible-dump/{{ ovirt_engine_remote_db_dump | basename }}
  when:
    - ovirt_engine_remote_db_dump is defined
    - ovirt_engine_remote_db == True
  tags:
    - skip_ansible_lint

- name: get DWH dump
  copy:
    src: "{{ ovirt_engine_remote_db_dwh_dump }}"
    dest: "{{ pgpath.stdout }}/ansible-dump/{{ ovirt_engine_remote_db_dwh_dump | basename }}"
  when:
    - ovirt_engine_remote_db_dwh_dump is defined
    - ovirt_engine_dwh_remote_db == True

- name: import DWH dump
  become_user: postgres
  become: yes
  shell: pg_restore -d {{ ovirt_engine_dwh_db_name }} ansible-dump/{{ ovirt_engine_remote_db_dwh_dump | basename }}
  when:
    - ovirt_engine_remote_db_dwh_dump is defined
    - ovirt_engine_dwh_remote_db == True
  tags:
    - skip_ansible_lint

- name: check PostgreSQL service
  service:
    name: postgresql
    state: started
    enabled: yes

- name: clean sql files
  file:
    path: '{{ pgpath.stdout }}/ansible-sql'
    state: 'absent'

- name: clean dump files
  file:
    path: '{{ pgpath.stdout }}/ansible-dump'
    state: 'absent'

